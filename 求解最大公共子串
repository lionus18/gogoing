def longestSubstring(s1, s2):
    length_1 = len(s1)
    length_2 = len(s2)
    max_length = 0
    start = 0
    end = 0

    #  求最大公共子串,动态规划
    """
    dp[i][j]=dp[i-1][j-1]+1,  Xi=Yj  (i>0,j>0)
    dp[i][j]=0,  i=0 or j=0
    dp[i][j]=0,  
    """
    dp = [[0] * length_2 for i in range(length_1)]  # 定义一个长宽为length的二维数组,并初始化为0
    for i in range(length_1):
        for j in range(length_2):
            if s1[i] == s2[j]:
                if i > 0 and j > 0:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                    if max_length < dp[i][j]:
                        max_length = dp[i][j]
                        start = i - max_length + 1
                        end = i
                else:
                    dp[i][j] = 1
            else:
                dp[i][j] = 0
    # print(dp)
    return s1[start:end + 1]  # list->string   string="".join([list])
