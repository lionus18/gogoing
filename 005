def longestpalindrome(s):
    length = len(s)
    list_s_reverse = list(s)
    list_s_reverse.reverse()
    s_reverse = "".join(list_s_reverse)

    max_length = 0


    def ispalindrome(_str_):
        if _str_ is "":
            return False
        l_list = list(_str_)
        l_reverse = l_list.copy()
        l_reverse.reverse()
        if l_list == l_reverse:
            return True
        else:
            return False

    #  求最大公共子串,检查备选项是否是回文串,动态规划
    """
    
    dp[i][j]=dp[i-1][j-1]+1,  Xi=Yj  (i>0,j>0)
    dp[i][j]=0,  i=0 or j=0
    dp[i][j]=0,  
    """
    dp = [[0] * length for i in range(length)]  # 定义一个长宽为length的二维数组,并初始化为0
    for i in range(length):
        for j in range(length):
            if s[i] == s_reverse[j]:
                if i > 0 and j > 0:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                    """   检查备选项是否是回文串   """
                    #  待完善

                else:
                    dp[i][j] = 1
            else:
                dp[i][j] = 0
    for l in dp:
        print(l)
    return s[start:end + 1]


